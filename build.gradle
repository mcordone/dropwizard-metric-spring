group 'com.aol.advertising'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
    }
}

apply plugin: 'java'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'war'

sourceCompatibility = 1.8
war.archiveName = 'metrics.war'

def env_ = project.hasProperty('env') ? project.getProperty('env') : 'development'

tomcat{
    contextPath = '/'
    httpPort = 9000
    ajpPort = 8099
    daemon = false
}

repositories {
    mavenCentral()
    jcenter()
}

def tomcatVersion = '8.0.28'
dependencies {
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.springframework:spring-beans:4.1.0.RELEASE'
    compile 'org.springframework:spring-test:4.1.0.RELEASE'
    compile 'org.springframework:spring-context:4.1.0.RELEASE'
    compile 'org.springframework:spring-tx:4.1.0.RELEASE'
    compile 'org.springframework:spring-test:3.2.3.RELEASE'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.21'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.21'
    compile 'org.glassfish.jersey.ext:jersey-spring3:2.21'
    compile 'org.glassfish.jersey.core:jersey-client:2.21'
    compile 'com.ryantenney.metrics:metrics-spring:3.1.3'
    compile group: 'org.coursera', name: 'metrics-datadog', version: '1.1.6'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'ch.qos.logback:logback-access:1.1.3'
    compile 'ch.qos.logback:logback-core:1.1.3'
    tomcat 'ch.qos.logback:logback-classic:1.1.3'
    tomcat 'ch.qos.logback:logback-access:1.1.3'
    tomcat 'ch.qos.logback:logback-core:1.1.3'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:jul-to-slf4j:1.7.12'
    compile 'org.codehaus.groovy:groovy:2.4.3'
    compile 'javax:javaee-api:7.0'
    testCompile 'javax:javaee-api:7.0'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

test.dependsOn 'war'

test {
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}


task moveToDocker(dependsOn: 'war') << {
    copy{
        from "build/libs"
        into "docker/application"
        include "*.war"
    }
}

task buildImage(dependsOn: 'moveToDocker') << {
    exec{
        workingDir "docker"
        commandLine "docker", "build", "--rm=true", "--tag=${ext.dockerId}", "."
        standardOutput = new ByteArrayOutputStream()
        ext.buildName = {
            return (standardOutput.toString() =~ /Successfully built (\w+)/)[0][1]
        }
    }
}

buildImage.doFirst {
    if (project.hasProperty('uuid')) {
        ext.dockerId = uuid
    } else {
        ext.dockerId = UUID.randomUUID().toString();
    }
}

buildImage.doLast {
    println("Successfully built image $ext.dockerId")
}

task tagImage(dependsOn: 'buildImage') << {
    exec {
        commandLine "docker", "tag", "-f", "${buildImage.dockerId}", tagName
    }
    exec {
        commandLine "docker", "rmi", "-f", "${buildImage.dockerId}"
    }
}

task pushImage(dependsOn: 'tagImage') << {
    exec {
        commandLine "docker", "push", tagName
    }
}

task runImage(dependsOn: 'buildImage') << {
    exec{
        workingDir "docker"
        commandLine "docker", "run", "-e", "environment=${env_}", "-p", "8080:8080", "${buildImage.buildName()}"
    }
}

clean {
    delete 'docker/application'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
